/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package types;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ClickHistory extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ClickHistory\",\"namespace\":\"types\",\"fields\":[{\"name\":\"session_id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"pixels\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Coordinates\",\"fields\":[{\"name\":\"x\",\"type\":\"float\"},{\"name\":\"y\",\"type\":\"float\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.String session_id;
  @Deprecated public java.util.List<types.Coordinates> pixels;

  /**
   * Default constructor.
   */
  public ClickHistory() {}

  /**
   * All-args constructor.
   */
  public ClickHistory(java.lang.String session_id, java.util.List<types.Coordinates> pixels) {
    this.session_id = session_id;
    this.pixels = pixels;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return session_id;
    case 1: return pixels;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: session_id = (java.lang.String)value$; break;
    case 1: pixels = (java.util.List<types.Coordinates>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'session_id' field.
   */
  public java.lang.String getSessionId() {
    return session_id;
  }

  /**
   * Sets the value of the 'session_id' field.
   * @param value the value to set.
   */
  public void setSessionId(java.lang.String value) {
    this.session_id = value;
  }

  /**
   * Gets the value of the 'pixels' field.
   */
  public java.util.List<types.Coordinates> getPixels() {
    return pixels;
  }

  /**
   * Sets the value of the 'pixels' field.
   * @param value the value to set.
   */
  public void setPixels(java.util.List<types.Coordinates> value) {
    this.pixels = value;
  }

  /** Creates a new ClickHistory RecordBuilder */
  public static types.ClickHistory.Builder newBuilder() {
    return new types.ClickHistory.Builder();
  }
  
  /** Creates a new ClickHistory RecordBuilder by copying an existing Builder */
  public static types.ClickHistory.Builder newBuilder(types.ClickHistory.Builder other) {
    return new types.ClickHistory.Builder(other);
  }
  
  /** Creates a new ClickHistory RecordBuilder by copying an existing ClickHistory instance */
  public static types.ClickHistory.Builder newBuilder(types.ClickHistory other) {
    return new types.ClickHistory.Builder(other);
  }
  
  /**
   * RecordBuilder for ClickHistory instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ClickHistory>
    implements org.apache.avro.data.RecordBuilder<ClickHistory> {

    private java.lang.String session_id;
    private java.util.List<types.Coordinates> pixels;

    /** Creates a new Builder */
    private Builder() {
      super(types.ClickHistory.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(types.ClickHistory.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing ClickHistory instance */
    private Builder(types.ClickHistory other) {
            super(types.ClickHistory.SCHEMA$);
      if (isValidValue(fields()[0], other.session_id)) {
        this.session_id = data().deepCopy(fields()[0].schema(), other.session_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.pixels)) {
        this.pixels = data().deepCopy(fields()[1].schema(), other.pixels);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'session_id' field */
    public java.lang.String getSessionId() {
      return session_id;
    }
    
    /** Sets the value of the 'session_id' field */
    public types.ClickHistory.Builder setSessionId(java.lang.String value) {
      validate(fields()[0], value);
      this.session_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'session_id' field has been set */
    public boolean hasSessionId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'session_id' field */
    public types.ClickHistory.Builder clearSessionId() {
      session_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'pixels' field */
    public java.util.List<types.Coordinates> getPixels() {
      return pixels;
    }
    
    /** Sets the value of the 'pixels' field */
    public types.ClickHistory.Builder setPixels(java.util.List<types.Coordinates> value) {
      validate(fields()[1], value);
      this.pixels = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'pixels' field has been set */
    public boolean hasPixels() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'pixels' field */
    public types.ClickHistory.Builder clearPixels() {
      pixels = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public ClickHistory build() {
      try {
        ClickHistory record = new ClickHistory();
        record.session_id = fieldSetFlags()[0] ? this.session_id : (java.lang.String) defaultValue(fields()[0]);
        record.pixels = fieldSetFlags()[1] ? this.pixels : (java.util.List<types.Coordinates>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
